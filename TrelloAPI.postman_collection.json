{
	"info": {
		"_postman_id": "7ef8fcf0-7bfe-4ca6-b03e-be7ed0ba7e62",
		"name": "TrelloAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29862643"
	},
	"item": [
		{
			"name": "Create new Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify status code\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"    resBody = pm.response.json();\r",
							"    console.log(resBody);\r",
							"})\r",
							"pm.test(\"Should verify created board name\", ()=>{\r",
							"   pm.expect(resBody.name).to.eql(pm.collectionVariables.get(\"boardName\"))\r",
							"})\r",
							"pm.test(\"Should verify response ID\", ()=>{\r",
							"    pm.expect(resBody.id.length).to.greaterThan(10);\r",
							"    pm.collectionVariables.set(\"boardId\",resBody.id);\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeString(length) {\r",
							"    let result = '';\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    const charactersLength = characters.length;\r",
							"    let counter = 0;\r",
							"    while (counter < length) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"      counter += 1;\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"pm.collectionVariables.set(\"boardName\", makeString(15));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/boards/?name={{boardName}}&key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify status code \", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"    console.log(resBody)\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify type of name\",()=>{\r",
							"   resBody.map(item =>{ pm.expect(item.name).to.be.a(\"string\")})\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/members/me/boards?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify code status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify  udate name\", () => {\r",
							"    pm.expect(resBody.name).to.eql(pm.collectionVariables.get(\"updateBoardName\"));\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeString(length) {\r",
							"    let result = '';\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    const charactersLength = characters.length;\r",
							"    let counter = 0;\r",
							"    while (counter < length) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"      counter += 1;\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"pm.collectionVariables.set(\"updateBoardName\", makeString(15));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/boards/{{boardId}}?key={{key}}&token={{token}}&name={{updateBoardName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{updateBoardName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify status code \", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify created list name\", ()=>{\r",
							"    pm.expect(resBody.name).to.eql(pm.collectionVariables.get(\"listName\"));\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify response ID\",()=>{\r",
							"    pm.expect(resBody.id.length).to.greaterThan(10);\r",
							"    pm.collectionVariables.set(\"listID\", resBody.id);\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeString(length) {\r",
							"    let result = '';\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    const charactersLength = characters.length;\r",
							"    let counter = 0;\r",
							"    while (counter < length) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"      counter += 1;\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"pm.collectionVariables.set(\"listName\", makeString(15));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/boards/{{boardId}}/lists?name={{listName}}&key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{listName}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Lists on Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify status code\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify closed value\", ()=>{\r",
							"    resBody.map(item =>{pm.expect(item.closed).to.eql(false)})\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/boards/{{boardId}}/lists?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"pm.test(\"Should verify status code\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify value of id list and id board\", ()=>{\r",
							"    pm.expect(resBody.idList).to.eql(pm.collectionVariables.get(\"listID\"));\r",
							"    pm.expect(resBody.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"))\r",
							"})\r",
							"pm.collectionVariables.set(\"cardId\",resBody.id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeString(length) {\r",
							"    let result = '';\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    const charactersLength = characters.length;\r",
							"    let counter = 0;\r",
							"    while (counter < length) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"      counter += 1;\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"pm.collectionVariables.set(\"cartName\", makeString(15));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cards?idList={{listID}}&key={{key}}&token={{token}}&name={{cartName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{listID}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{cartName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list of Cards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify code status\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify  id list and id board\",()=>{\r",
							"    resBody.map(item =>{\r",
							"        pm.expect(item.idList).to.eql(pm.collectionVariables.get(\"listID\"));\r",
							"        pm.expect(item.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
							"    })\r",
							"})\r",
							"\r",
							"    pm.test(\"Should verify shortLink type\",()=>{\r",
							"    resBody.map(item =>{\r",
							"        pm.expect(item.shortLink).to.be.a(\"string\");\r",
							"    })\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/boards/{{boardId}}/cards?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"boards",
						"{{boardId}}",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify code status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"pm.test(\"Should verify description \", () => {\r",
							" \r",
							"pm.expect(resBody.desc).to.eql(pm.collectionVariables.get(\"updateDesc\"));\r",
							"})\r",
							"pm.test(\"Should verify  udate name\", () => {\r",
							"    pm.expect(resBody.name).to.eql(pm.collectionVariables.get(\"updateCartName\"));\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeString(length) {\r",
							"    let result = '';\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    const charactersLength = characters.length;\r",
							"    let counter = 0;\r",
							"    while (counter < length) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"      counter += 1;\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"pm.collectionVariables.set(\"updateCartName\", makeString(15));\r",
							"pm.collectionVariables.set(\"updateDesc\", makeString(15));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cards/{{cardId}}?key={{key}}&token={{token}}&name={{updateCartName}}&desc={{updateDesc}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{updateCartName}}"
						},
						{
							"key": "desc",
							"value": "{{updateDesc}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Checklist on a Card",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeString(length) {\r",
							"    let result = '';\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    const charactersLength = characters.length;\r",
							"    let counter = 0;\r",
							"    while (counter < length) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"      counter += 1;\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"pm.collectionVariables.set(\"checklistName\", makeString(15));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"pm.test(\"Should verify status code\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify value of id card and id board\", ()=>{\r",
							"    pm.expect(resBody.idCard).to.eql(pm.collectionVariables.get(\"cardId\"));\r",
							"    pm.expect(resBody.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"))\r",
							"})\r",
							"pm.collectionVariables.set(\"checklistId\",resBody.id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cards/{{cardId}}/checklists?key={{key}}&token={{token}}&name={{checklistName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cards",
						"{{cardId}}",
						"checklists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{checklistName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  Checklist on a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify code status\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify card and board id\",()=>{\r",
							"    resBody.map(item =>{\r",
							"        pm.expect(item.idCard).to.eql(pm.collectionVariables.get(\"cardId\"));\r",
							"        pm.expect(item.idBoard).to.eql(pm.collectionVariables.get(\"boardId\"));\r",
							"    })\r",
							"})\r",
							"\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cards/{{cardId}}/checklists?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cards",
						"{{cardId}}",
						"checklists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Checkitem on Checklist",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function makeString(length) {\r",
							"    let result = '';\r",
							"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    const charactersLength = characters.length;\r",
							"    let counter = 0;\r",
							"    while (counter < length) {\r",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"      counter += 1;\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"pm.collectionVariables.set(\"checkitemName\", makeString(15));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"pm.test(\"Should verify status code\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify value of Checklist id\", ()=>{\r",
							"    pm.expect(resBody.idChecklist).to.eql(pm.collectionVariables.get(\"checklistId\"));\r",
							"\r",
							"})\r",
							"pm.collectionVariables.set(\"checkitemId\",resBody.id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/checklists/{{checklistId}}/checkItems?key={{key}}&token={{token}}&name={{checkitemName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"checklists",
						"{{checklistId}}",
						"checkItems"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{checkitemName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  Checkitem on Checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify code status\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify Checklist id\",()=>{\r",
							"    resBody[0].checkItems.map(item =>{\r",
							"        pm.expect(item.idChecklist).to.eql(pm.collectionVariables.get(\"checklistId\"));\r",
							"    })\r",
							"})\r",
							"\r",
							"\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cards/{{cardId}}/checklists?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cards",
						"{{cardId}}",
						"checklists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify code status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/checklists/{{checklistId}}?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"checklists",
						"{{checklistId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify code status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/cards/{{cardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resBody;\r",
							"\r",
							"pm.test(\"Should verify code status\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    resBody = pm.response.json();\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/boards/{{boardId}}?key={{key}}&token={{token}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://api.trello.com/1",
			"type": "string"
		},
		{
			"key": "boardName",
			"value": "",
			"type": "string"
		},
		{
			"key": "boardId",
			"value": ""
		},
		{
			"key": "listName",
			"value": "",
			"type": "string"
		},
		{
			"key": "listID",
			"value": ""
		},
		{
			"key": "cartName",
			"value": "",
			"type": "string"
		},
		{
			"key": "cardId",
			"value": ""
		},
		{
			"key": "updateCartName",
			"value": "",
			"type": "string"
		},
		{
			"key": "updateDesc",
			"value": "",
			"type": "string"
		},
		{
			"key": "checklistName",
			"value": ""
		},
		{
			"key": "checklistId",
			"value": ""
		},
		{
			"key": "updateBoardName",
			"value": ""
		},
		{
			"key": "checkitemName",
			"value": ""
		},
		{
			"key": "checkitemId",
			"value": ""
		}
	]
}